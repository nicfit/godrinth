// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package godrinth

import (
	"errors"
	"fmt"
)

const (
	// OperandTypeEqual is a OperandType of type Equal.
	OperandTypeEqual OperandType = iota
	// OperandTypeNotEqual is a OperandType of type NotEqual.
	OperandTypeNotEqual
	// OperandTypeGreaterThan is a OperandType of type GreaterThan.
	OperandTypeGreaterThan
	// OperandTypeGreaterThanOrEqual is a OperandType of type GreaterThanOrEqual.
	OperandTypeGreaterThanOrEqual
	// OperandTypeLessThan is a OperandType of type LessThan.
	OperandTypeLessThan
	// OperandTypeLessThanOrEqual is a OperandType of type LessThanOrEqual.
	OperandTypeLessThanOrEqual
)

var ErrInvalidOperandType = errors.New("not a valid OperandType")

const _OperandTypeName = "EqualNotEqualGreaterThanGreaterThanOrEqualLessThanLessThanOrEqual"

var _OperandTypeMap = map[OperandType]string{
	OperandTypeEqual:              _OperandTypeName[0:5],
	OperandTypeNotEqual:           _OperandTypeName[5:13],
	OperandTypeGreaterThan:        _OperandTypeName[13:24],
	OperandTypeGreaterThanOrEqual: _OperandTypeName[24:42],
	OperandTypeLessThan:           _OperandTypeName[42:50],
	OperandTypeLessThanOrEqual:    _OperandTypeName[50:65],
}

// String implements the Stringer interface.
func (x OperandType) String() string {
	if str, ok := _OperandTypeMap[x]; ok {
		return str
	}
	return fmt.Sprintf("OperandType(%d)", x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x OperandType) IsValid() bool {
	_, ok := _OperandTypeMap[x]
	return ok
}

var _OperandTypeValue = map[string]OperandType{
	_OperandTypeName[0:5]:   OperandTypeEqual,
	_OperandTypeName[5:13]:  OperandTypeNotEqual,
	_OperandTypeName[13:24]: OperandTypeGreaterThan,
	_OperandTypeName[24:42]: OperandTypeGreaterThanOrEqual,
	_OperandTypeName[42:50]: OperandTypeLessThan,
	_OperandTypeName[50:65]: OperandTypeLessThanOrEqual,
}

// ParseOperandType attempts to convert a string to a OperandType.
func ParseOperandType(name string) (OperandType, error) {
	if x, ok := _OperandTypeValue[name]; ok {
		return x, nil
	}
	return OperandType(0), fmt.Errorf("%s is %w", name, ErrInvalidOperandType)
}
